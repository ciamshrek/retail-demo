// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../routes/__root'
import { Route as IndexImport } from './../routes/index'
import { Route as ProductsIndexImport } from './../routes/products/index'
import { Route as OrdersIndexImport } from './../routes/orders/index'
import { Route as CheckoutIndexImport } from './../routes/checkout/index'
import { Route as CartIndexImport } from './../routes/cart/index'
import { Route as ProductsSlugImport } from './../routes/products/$slug'
import { Route as OrdersOrderIdImport } from './../routes/orders/$orderId'
import { Route as CheckoutSuccessImport } from './../routes/checkout/success'
import { Route as CheckoutCancelImport } from './../routes/checkout/cancel'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutIndexRoute = CheckoutIndexImport.update({
  id: '/checkout/',
  path: '/checkout/',
  getParentRoute: () => rootRoute,
} as any)

const CartIndexRoute = CartIndexImport.update({
  id: '/cart/',
  path: '/cart/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsSlugRoute = ProductsSlugImport.update({
  id: '/products/$slug',
  path: '/products/$slug',
  getParentRoute: () => rootRoute,
} as any)

const OrdersOrderIdRoute = OrdersOrderIdImport.update({
  id: '/orders/$orderId',
  path: '/orders/$orderId',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutSuccessRoute = CheckoutSuccessImport.update({
  id: '/checkout/success',
  path: '/checkout/success',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutCancelRoute = CheckoutCancelImport.update({
  id: '/checkout/cancel',
  path: '/checkout/cancel',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/checkout/cancel': {
      id: '/checkout/cancel'
      path: '/checkout/cancel'
      fullPath: '/checkout/cancel'
      preLoaderRoute: typeof CheckoutCancelImport
      parentRoute: typeof rootRoute
    }
    '/checkout/success': {
      id: '/checkout/success'
      path: '/checkout/success'
      fullPath: '/checkout/success'
      preLoaderRoute: typeof CheckoutSuccessImport
      parentRoute: typeof rootRoute
    }
    '/orders/$orderId': {
      id: '/orders/$orderId'
      path: '/orders/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof OrdersOrderIdImport
      parentRoute: typeof rootRoute
    }
    '/products/$slug': {
      id: '/products/$slug'
      path: '/products/$slug'
      fullPath: '/products/$slug'
      preLoaderRoute: typeof ProductsSlugImport
      parentRoute: typeof rootRoute
    }
    '/cart/': {
      id: '/cart/'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartIndexImport
      parentRoute: typeof rootRoute
    }
    '/checkout/': {
      id: '/checkout/'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof CheckoutIndexImport
      parentRoute: typeof rootRoute
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/checkout/cancel': typeof CheckoutCancelRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/cart': typeof CartIndexRoute
  '/checkout': typeof CheckoutIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/checkout/cancel': typeof CheckoutCancelRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/cart': typeof CartIndexRoute
  '/checkout': typeof CheckoutIndexRoute
  '/orders': typeof OrdersIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/checkout/cancel': typeof CheckoutCancelRoute
  '/checkout/success': typeof CheckoutSuccessRoute
  '/orders/$orderId': typeof OrdersOrderIdRoute
  '/products/$slug': typeof ProductsSlugRoute
  '/cart/': typeof CartIndexRoute
  '/checkout/': typeof CheckoutIndexRoute
  '/orders/': typeof OrdersIndexRoute
  '/products/': typeof ProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/checkout/cancel'
    | '/checkout/success'
    | '/orders/$orderId'
    | '/products/$slug'
    | '/cart'
    | '/checkout'
    | '/orders'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/checkout/cancel'
    | '/checkout/success'
    | '/orders/$orderId'
    | '/products/$slug'
    | '/cart'
    | '/checkout'
    | '/orders'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/checkout/cancel'
    | '/checkout/success'
    | '/orders/$orderId'
    | '/products/$slug'
    | '/cart/'
    | '/checkout/'
    | '/orders/'
    | '/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CheckoutCancelRoute: typeof CheckoutCancelRoute
  CheckoutSuccessRoute: typeof CheckoutSuccessRoute
  OrdersOrderIdRoute: typeof OrdersOrderIdRoute
  ProductsSlugRoute: typeof ProductsSlugRoute
  CartIndexRoute: typeof CartIndexRoute
  CheckoutIndexRoute: typeof CheckoutIndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CheckoutCancelRoute: CheckoutCancelRoute,
  CheckoutSuccessRoute: CheckoutSuccessRoute,
  OrdersOrderIdRoute: OrdersOrderIdRoute,
  ProductsSlugRoute: ProductsSlugRoute,
  CartIndexRoute: CartIndexRoute,
  CheckoutIndexRoute: CheckoutIndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/checkout/cancel",
        "/checkout/success",
        "/orders/$orderId",
        "/products/$slug",
        "/cart/",
        "/checkout/",
        "/orders/",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/checkout/cancel": {
      "filePath": "checkout/cancel.tsx"
    },
    "/checkout/success": {
      "filePath": "checkout/success.tsx"
    },
    "/orders/$orderId": {
      "filePath": "orders/$orderId.tsx"
    },
    "/products/$slug": {
      "filePath": "products/$slug.tsx"
    },
    "/cart/": {
      "filePath": "cart/index.tsx"
    },
    "/checkout/": {
      "filePath": "checkout/index.tsx"
    },
    "/orders/": {
      "filePath": "orders/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
